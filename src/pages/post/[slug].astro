---
import { ghostClient } from '../../lib/ghost';
import LayoutStacked from '../../layouts/LayoutStacked.astro';


export async function fetchBlogArticles(limit: number = 5, page: number = 1) {
    const { posts = [], meta } = await ghostClient.posts
        .browse({
            limit,
            page,
            fields: 'id,feature_image,title,excerpt,slug', // Explicitly request these fields
        })
        .catch((err: unknown) => {
            console.error('Error fetching posts:', err);
            return { posts: [], meta: {} }; // Return empty fallback data
        });
    return { posts, meta };
}

const { slug } = Astro.params;
const post = await ghostClient.posts.read(
  { slug },
  { formats: ['html'], include: 'authors' }
).catch((err: unknown) => {
  console.error(err);
  return null;
});
if (!post) {
  throw new Error('Post not found');
}

// Fetch related articles (exclude current post)
const relatedPosts = await ghostClient.posts
  .browse({
    limit: 4,
    filter: `id:-${post.id}`,
    fields: 'id,feature_image,title,slug',
  })
  .catch(() => []);
---

<LayoutStacked>
  <div class="flex flex-col lg:flex-row gap-8 max-w-7xl mx-auto px-4 py-8">
    <!-- Main Content -->
    <article class="w-full lg:w-[calc(100%-18rem)] bg-white dark:bg-gray-900 rounded-lg shadow-sm px-0 lg:px-12">
      <h1 class="text-3xl font-extrabold text-gray-900 dark:text-white text-center border-b-2 border-blue-200 pb-2 mb-4">
        {post.title}
      </h1>
      <div class="flex justify-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-8">
        <span>üñäÔ∏è {post.primary_author?.name || (post.authors && post.authors[0]?.name) || 'Unknown Author'}</span>
        <span>üìÖ {post.published_at ? new Date(post.published_at).toLocaleDateString() : 'Unknown date'}</span>
        <span>‚è±Ô∏è {post.reading_time ? `${post.reading_time} min read` : 'N/A'}</span>
      </div>
      {post.tags?.length > 0 && (
        <div class="flex flex-wrap gap-2 justify-center mb-4">
          {post.tags.map(tag => (
            <span class="bg-gray-200 dark:bg-gray-700 text-xs px-2 py-0.5 rounded">{tag.name}</span>
          ))}
        </div>
      )}
      <div class="prose prose-lg lg:prose-xl dark:prose-invert
        max-w-none border-l-2 border-blue-100 dark:border-blue-900
        pl-4 bg-white dark:bg-gray-900 shadow-md rounded
        prose-a:text-blue-600 dark:prose-a:text-blue-400
        prose-blockquote:border-blue-300 dark:prose-blockquote:border-blue-700
        prose-code:bg-gray-100 dark:prose-code:bg-gray-800
        text-gray-900 dark:text-gray-100
      ">
        <div set:html={post.html}></div>
      </div>

    </article>

    <!-- Sidebar -->
    <aside class="w-full lg:w-56 flex-shrink-0">
      <h2 class="text-lg font-semibold mb-4">Related Articles</h2>
      <ul class="space-y-4">
        {relatedPosts.map(rp => (
          <li class="bg-gray-50 dark:bg-gray-800 rounded p-3 shadow">
            <a href={`/post/${rp.slug}`} class="flex items-center gap-3 hover:underline">
              {rp.feature_image && (
                <img src={rp.feature_image} alt={rp.title} class="w-12 h-12 object-cover rounded" />
              )}
              <span class="font-medium text-gray-900 dark:text-white">{rp.title}</span>
            </a>
          </li>
        ))}
      </ul>
    </aside>
  </div>
</LayoutStacked>

<script is:inline type="module">
  window.addEventListener("DOMContentLoaded", () =>
    import("https://esm.run/mathlive").then((mathlive) =>
      mathlive.renderMathInDocument(),
    ),
  );
</script>

<script is:inline src="/lib/3dmoljs/3Dmol-min.js"></script>
<script is:inline src="/lib/3dmoljs/3Dmol.ui-min.js"></script>
